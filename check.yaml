AWSTemplateFormatVersion: '2010-09-09'
Description: snap-transperancy-production-vpc
#### FOR PRODUCTION - take a note of Subnets in the specific regions. Ex: NVirginia has many subnets which can be used as specific private subnets for services like AuroaDB, MemCached etc... 
Parameters:
  ENV:
    Type: String
    Default: prod
  Prefix:
    Type: String
    Default: snap-tp
  Region:
    Type: String
    Default: us-west-2

  VpcCidr:
    Description: VPC CIDR Range
    Type: String
  PublicSubnetOneCidr:
    Description: Public Subnet One CIDR Range
    Type: String
  PublicSubnetTwoCidr:
    Description: Public Subnet Two CIDR Range
    Type: String
  PrivateSubnetOneCidr:
    Description: Private Subnet One CIDR Range
    Type: String
  PrivateSubnetTwoCidr:
    Description: Private Subnet Two CIDR Range
    Type: String
  PrivateSubnetThreeCidr:
    Description: Private Subnet Three CIDR Range
    Type: String
  AuroraPrivateSubnetFourCidr:
    Description: AuroraDB Private Subnet Four CIDR Range
    Type: String
  AuroraPrivateSubnetFiveCidr:
    Description: AuroraDB Private Subnet Five CIDR Range
    Type: String
  # EKSCLUSTERSECURITYGROUPID:
  #   Description: EKS Security GROUP ID
  # EKSSecurityGroup:
  #   Description: EKS Security group
  #   Type: String
  #   Default: sg-0e6cd64d413cce1e1

####### for test run commenting - need to add new keys for production
  KeyPairName: #This keypair needs to be created manually
    Description: Keypair for Linux bastion host in Prod environment us-west-2 Oregon
    Type: AWS::EC2::KeyPair::KeyName
    Default: west2-pair

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0022f774911c1d690
    us-west-2:
      AMI: ami-02541b8af977f6cdd
    us-east-2:
      AMI: ami-0fa49cc9dc8d62c84
    us-west-2:
      AMI: ami-0ca285d4c2cda3300

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: 
        Ref: VpcCidr
      Tags:
      - Key: Name
        Value: !Sub ${Prefix}-${ENV}-VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${Prefix}-${ENV}-igw
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    #DeletionPolicy: Retain 
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    #DeletionPolicy: Retain 
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub ${Prefix}-${ENV}-rtb-public
  PublicRoute:
    Type: AWS::EC2::Route
    #DeletionPolicy: Retain 
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway


  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    #DeletionPolicy: Retain 
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PublicSubnetOneCidr
      AvailabilityZone: !Join ["",[Ref: Region,"a"]]
      # AvailabilityZone: !Sub
      #           - ${Region}
      #           - a
      Tags:
      - Key: Name
#        Value: !Sub ${Prefix}-${ENV}-subnet-public1-${Region}a
        Value: !Join ["", [Ref: Prefix,"-",Ref: ENV,"-subnet-public1-",Ref: Region,"a"]]


  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    #DeletionPolicy: Retain 
    Properties:
      SubnetId:
        Ref: PublicSubnetOne
      RouteTableId:
        Ref: PublicRouteTable


  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    #DeletionPolicy: Retain 
    Properties:
      VpcId:
        Ref: VPC
      MapPublicIpOnLaunch: true
      CidrBlock:
        Ref: PublicSubnetTwoCidr
#      AvailabilityZone: ${Region}b
      AvailabilityZone: !Join ["",[Ref: Region,"b"]]

      Tags:
      - Key: Name
#        Value: !Sub ${Prefix}-${ENV}-subnet-public2-${Region}b
        Value: !Join ["", [Ref: Prefix,"-",Ref: ENV,"-subnet-public2-",Ref: Region,"b"]]


  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    #DeletionPolicy: Retain 
    Properties:
      SubnetId:
        Ref: PublicSubnetTwo
      RouteTableId:
        Ref: PublicRouteTable


  PrivateRouteTableOne:
    Type: AWS::EC2::RouteTable
    #DeletionPolicy: Retain 
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
#        Value: !Sub ${Prefix}-${ENV}-rtb-private1-${Region}a 
        Value: !Join ["", [Ref: Prefix,"-",Ref: ENV,"-rtb-private1-",Ref: Region,"a"]]


  PrivateSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    #DeletionPolicy: Retain 
    Properties:
      SubnetId:
        Ref: PrivateSubnetOne
      RouteTableId:
        Ref: PrivateRouteTableOne


  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    #DeletionPolicy: Retain 
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivateSubnetOneCidr
#      AvailabilityZone: ${Region}a
      AvailabilityZone:  !Join ["",[Ref: Region,"a"]]
      Tags:
      - Key: Name
#        Value: !Sub ${Prefix}-${ENV}-subnet-private1-${Region}a
        Value: !Join ["", [Ref: Prefix,"-",Ref: ENV,"-subnet-private1-",Ref: Region,"a"]]


  PrivateRouteTableTwo:
    Type: AWS::EC2::RouteTable
    #DeletionPolicy: Retain 
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
#        Value: !Sub ${Prefix}-${ENV}-rtb-private2-${Region}b
        Value: !Join ["", [Ref: Prefix,"-",Ref: ENV,"-rtb-private2-",Ref: Region,"b"]]  



  PrivateSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    #DeletionPolicy: Retain 
    Properties:
      SubnetId:
        Ref: PrivateSubnetTwo
      RouteTableId:
        Ref: PrivateRouteTableTwo


  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    #DeletionPolicy: Retain 
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivateSubnetTwoCidr
#      AvailabilityZone: ${Region}b
      AvailabilityZone:  !Join ["",[Ref: Region,"b"]]
      Tags:
      - Key: Name
#        Value: !Sub ${Prefix}-${ENV}-subnet-private2-${Region}b
        Value: !Join ["", [Ref: Prefix,"-",Ref: ENV,"-subnet-private2-",Ref: Region,"b"]]


  PrivateRouteTableThree:
    Type: AWS::EC2::RouteTable
    #DeletionPolicy: Retain 
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
#        Value: !Sub ${Prefix}-${ENV}-rtb-private3-${Region}c
        Value: !Join ["", [Ref: Prefix,"-",Ref: ENV,"-rtb-private3-",Ref: Region,"c"]]

  PrivateSubnetThreeRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    #DeletionPolicy: Retain 
    Properties:
      SubnetId:
        Ref: PrivateSubnetThree
      RouteTableId:
        Ref: PrivateRouteTableThree


  PrivateSubnetThree:
    Type: AWS::EC2::Subnet
    #DeletionPolicy: Retain 
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivateSubnetThreeCidr
#      AvailabilityZone: ${Region}c
      AvailabilityZone:  !Join ["",[Ref: Region,"c"]]
      Tags:
      - Key: Name
#        Value: !Sub ${Prefix}-${ENV}-subnet-private3-${Region}c
        # Value: !Sub
        #         - ${Prefix}-${ENV}-subnet-private3-${Region}
        #         - c
        Value: !Join ["", [Ref: Prefix,"-",Ref: ENV,"-subnet-private3-",Ref: Region,"c"]]
####################### AuroraDB private Subnets 4 & 5 - AZ b & c ##################

  AuroraPrivateRouteTableFour:
    Type: AWS::EC2::RouteTable
    #DeletionPolicy: Retain 
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Join ["", [Ref: Prefix,"-",Ref: ENV,"-rtb-private4-db-",Ref: Region,"b"]]

  AuroraPrivateSubnetFourRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    #DeletionPolicy: Retain 
    Properties:
      SubnetId:
        Ref: AuroraPrivateSubnetFour
      RouteTableId:
        Ref: AuroraPrivateRouteTableFour


  AuroraPrivateSubnetFour:
    Type: AWS::EC2::Subnet
    #DeletionPolicy: Retain 
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: AuroraPrivateSubnetFourCidr
      AvailabilityZone:  !Join ["",[Ref: Region,"b"]]
      Tags:
      - Key: Name
        Value: !Join ["", [Ref: Prefix,"-",Ref: ENV,"-subnet-private4-db-",Ref: Region,"b"]]

#-----------------

  AuroraPrivateRouteTableFive:
    Type: AWS::EC2::RouteTable
    #DeletionPolicy: Retain 
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Join ["", [Ref: Prefix,"-",Ref: ENV,"-rtb-private5-db-",Ref: Region,"c"]]

  AuroraPrivateSubnetFiveRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    #DeletionPolicy: Retain 
    Properties:
      SubnetId:
        Ref: AuroraPrivateSubnetFive
      RouteTableId:
        Ref: AuroraPrivateRouteTableFive


  AuroraPrivateSubnetFive:
    Type: AWS::EC2::Subnet
    #DeletionPolicy: Retain 
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: AuroraPrivateSubnetFiveCidr
      AvailabilityZone:  !Join ["",[Ref: Region,"c"]]
      Tags:
      - Key: Name
        Value: !Join ["", [Ref: Prefix,"-",Ref: ENV,"-subnet-private5-db-",Ref: Region,"c"]]

##### NAT GATEWAY #######
## https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-natgateway.html#cfn-ec2-natgateway-allocationid
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
        AllocationId: !GetAtt NATGatewayEIP.AllocationId
        SubnetId: !Ref PublicSubnetOne
        Tags:
        - Key: Name
          Value: !Join ["", [Ref: Prefix,"-",Ref: ENV,"-NAT-GATEWAY-",Ref: Region]]
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
        Domain: vpc
  RouteNATGateway:
    DependsOn: NATGateway
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref PrivateRouteTableOne
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: !Ref NATGateway
  RouteNATGatewayPvt2:
    DependsOn: NATGateway
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref PrivateRouteTableTwo
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: !Ref NATGateway
  RouteNATGatewayPvt3:
    DependsOn: NATGateway
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref PrivateRouteTableThree
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: !Ref NATGateway
  RouteNATGatewayPvt4:
    DependsOn: NATGateway
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref AuroraPrivateRouteTableFour
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: !Ref NATGateway
  RouteNATGatewayPvt5:
    DependsOn: NATGateway
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref AuroraPrivateRouteTableFive
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: !Ref NATGateway        
  # RouteNATGatewayPvt5:
  #   DependsOn: NATGateway
  #   Type: AWS::EC2::Route
  #   Properties:
  #       RouteTableId: !Ref AuroraPrivateRouteTableFive
  #       DestinationCidrBlock: '0.0.0.0/0'
  #       NatGatewayId: !Ref: NATGateway

###########################################################################
############ SECURITY GROUPS SECTION #################
###########################################################################
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPC'
      GroupDescription: Bastion - allow all inbound SSH access via port 22, allow all outbound traffic i.e. to 0.0.0./0
      GroupName: !Join ["", [Ref: Prefix,"-",Ref: ENV,"-Bastion-EC2-SecurityGroup"]]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '5601'
          ToPort: '5601'
          CidrIp: 0.0.0.0/0 # IP Place holder who is allowed to acces this bastion host, with this no one can access the machine, Edit the inbound rules for this securitygroup in console & add you IP for accessing this host
        # For Production identify one Public subnet for Bastion machines
      Tags:
        - Key: Name
  #        Value: !Sub 'BastionHost SecurityGroup ${PrivateSubnetOneCidr}'
          Value: !Join ["", [Ref: Prefix,"-",Ref: ENV,"-Bastion-EC2-SecurityGroup"]]
        - Key: CloudFormationStack
          Value: !Ref 'AWS::StackId'

# Ref: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group-ingress.html#cfn-ec2-security-group-ingress-sourcesecuritygroupid

  # ElasticSearchSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     VpcId: !Ref 'VPC'
  #     GroupDescription: ElasticSearch SecurityGroup, allow inbound only from Bastion host which is having Kibana, & all outbound traffic i.e. to 0.0.0.0./0
  #     GroupName: ElasticSearch-SecurityGroup
  #     IpProtocol: tcp
  #     FromPort: '9200'
  #     ToPort: '9200'         
  #     SourceSecurityGroupId:
  #       Fn::GetAtt:
  #         - BastionSecurityGroup
  #         - GroupId
  #     GroupId:
  #       Fn::GetAtt:
  #         - ElasticSearchSecurityGroup
  #         - GroupId
  #     Tags:
  #     - Key: Name
  #       Value: !Sub 'ElasticSearch SecurityGroup ${PrivateSubnetOneCidr}'
  #     - Key: CloudFormationStack
  #       Value: !Ref 'AWS::StackId'

  ElasticSearchSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPC'
      GroupDescription: ElasticSearch SecurityGroup, allow inbound only from Bastion host which is having Kibana, & all outbound traffic i.e. to 0.0.0.0./0
      GroupName: !Join ["", [Ref: Prefix,"-",Ref: ENV,"-ElasticSearch-SecurityGroup"]]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '9200'
          ToPort: '9200'
          CidrIp: 0.0.0.0/0
          Description: Allow all 9200 port traffic from all IPs to ElasticSearch. Hardening needs to be done.              
      # IpProtocol: tcp
      # FromPort: '9200'
      # ToPort: '9200'
      Tags:
      - Key: Name
        Value: !Join ["", [Ref: Prefix,"-",Ref: ENV,"-ElasticSearch-SecurityGroup"]]
      - Key: CloudFormationStack
        Value: !Ref 'AWS::StackId'

  ElasticSearchInboundFromLambda:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow Lambda to connect to ElasticSearch through port 9200
      IpProtocol: tcp
      FromPort: 9200
      ToPort: 9200
      SourceSecurityGroupId:
        Fn::GetAtt:
          - LambdaSecurityGroup
          - GroupId
      GroupId:
        Fn::GetAtt:
          - ElasticSearchSecurityGroup
          - GroupId

  # ElasticSearchInboundFromEKS:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     Description: Allow EKS to connect to ElasticSearch through port 9200
  #     IpProtocol: tcp
  #     FromPort: 9200
  #     ToPort: 9200
  #     SourceSecurityGroupId:
  #       Fn::GetAtt:
  #         - Fn::ImportValue: EKSSecurityGroup
  #         - GroupId
  #     GroupId:
  #       Fn::GetAtt:
  #         - ElasticSearchSecurityGroup
  #         - GroupId

  ElasticSearchInboundFromBastion:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow Kibana to connect from BastionHost through port 9200
      IpProtocol: tcp
      FromPort: 9200
      ToPort: 9200
      SourceSecurityGroupId:
        Fn::GetAtt:
          - BastionSecurityGroup
          - GroupId
      GroupId:
        Fn::GetAtt:
          - ElasticSearchSecurityGroup
          - GroupId

  ElasticSearchInboundSSHFromBastion:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow SSH Traffic from BastionHost through port 22
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId:
        Fn::GetAtt:
          - BastionSecurityGroup
          - GroupId
      GroupId:
        Fn::GetAtt:
          - ElasticSearchSecurityGroup
          - GroupId       

################ LoadBalancer SECURITY GROUP ##############
  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: LoadBalancer security group to allow all http https traffic from Backend Lambda
      GroupName: !Join ["", [Ref: Prefix,"-",Ref: ENV,"-LoadBalancer-SecurityGroup"]]
      VpcId: 
        Ref: VPC
      # SecurityGroupIngress:
      # - IpProtocol: tcp
      #   FromPort: '80'
      #   ToPort: '80'
      #   CidrIp: 0.0.0.0/0
      # - IpProtocol: tcp
      #   FromPort: '443'
      #   ToPort: '443'
      #   CidrIp: 0.0.0.0/0        
      Tags:
      - Key: Name
        Value: !Join ["", [Ref: Prefix,"-",Ref: ENV,"-LoadBalancer-SecurityGroup"]]
      - Key: CloudFormationStack
        Value: !Ref 'AWS::StackId'

  LBHttpInboundfromLambda:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      Description: LoadBalancer security group to allow all http traffic from Backend Lambda
      SourceSecurityGroupId:
        Fn::GetAtt:
          - LambdaSecurityGroup
          - GroupId
      GroupId:
        Fn::GetAtt:
          - LBSecurityGroup
          - GroupId


  LBHttpsInboundfromLambda:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      Description: LoadBalancer security group to allow all https traffic from Backend Lambda
      SourceSecurityGroupId:
        Fn::GetAtt:
          - LambdaSecurityGroup #Hard coding this because of cloudformation limitation https://exchangetuts.com/aws-cloudformation-fnimportvalue-inside-fngetatt-1640154183722444
          - GroupId
      GroupId:
        Fn::GetAtt:
          - LBSecurityGroup
          - GroupId  
          
  ElasticHttpsInboundfromLambda:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      Description: LoadBalancer security group to allow all https traffic from ElasticSearch
      SourceSecurityGroupId:
        Fn::GetAtt:
          - ElasticSearchSecurityGroup 
          - GroupId
      GroupId:
        Fn::GetAtt:
          - LBSecurityGroup
          - GroupId

  ElasticHttpInboundfromLambda:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      Description: LoadBalancer security group to allow all http traffic from ElasticSearch
      SourceSecurityGroupId:
        Fn::GetAtt:
          - ElasticSearchSecurityGroup
          - GroupId
      GroupId:
        Fn::GetAtt:
          - LBSecurityGroup
          - GroupId          

#   LBHttpInboundfromEKS:
#     Type: AWS::EC2::SecurityGroupIngress
#     Properties:
#       IpProtocol: tcp
#       FromPort: 80
#       ToPort: 80
#       Description: LoadBalancer security group to allow all http traffic from EKS
#       SourceSecurityGroupId:
#         Fn::GetAtt:
#           - "sg-0e6cd64d413cce1e1"
# #          - !ImportValue EKSSecurityGroup
#            #Hard coding this because of cloudformation limitation https://exchangetuts.com/aws-cloudformation-fnimportvalue-inside-fngetatt-1640154183722444
#           - GroupId
#       GroupId:
#         Fn::GetAtt:
#           - LBSecurityGroup
#           - GroupId

  # LBHttpsInboundfromEKS:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     IpProtocol: tcp
  #     FromPort: 443
  #     ToPort: 443
  #     Description: LoadBalancer security group to allow all https traffic from EKS
  #     SourceSecurityGroupId:
  #       Fn::GetAtt:
  #         - "sg-0e6cd64d413cce1e1"
  #         - GroupId
  #     GroupId:
  #       Fn::GetAtt:
  #         - LBSecurityGroup
  #         - GroupId

################ ELASTICACHE MEMCACHED SECURITY GROUP ##############
  MemCachedSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Memcached All inbound traffic from 11211 & all outbound traffic i.e. 0.0.0.0.
      GroupName: !Join ["", [Ref: Prefix,"-",Ref: ENV,"-Memcached-SecurityGroup"]]
      VpcId: 
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '11211'
        ToPort: '11211'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Join ["", [Ref: Prefix,"-",Ref: ENV,"-Memcached-SecurityGroup"]]
      - Key: CloudFormationStack
        Value: !Ref 'AWS::StackId'


  # MemCachedOutboundToAuroraRule:
  #   Type: AWS::EC2::SecurityGroupEgress
  #   Properties:
  #     IpProtocol: tcp
  #     FromPort: 5432
  #     ToPort: 5432
  #     DestinationSecurityGroupId:
  #       Fn::GetAtt:
  #         - AuroraDBSecurityGroup
  #         - GroupId  
  #     GroupId:
  #       Fn::GetAtt:
  #         - MemCachedSecurityGroup
  #         - GroupId

  # MemCachedInboundFromLambdaRule:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     IpProtocol: tcp
  #     FromPort: 11211
  #     ToPort: 11211
  #     SourceSecurityGroupId:
  #       Fn::GetAtt:
  #         - LambdaSecurityGroup
  #         - GroupId
  #     GroupId:
  #       Fn::GetAtt:
  #         - MemCachedSecurityGroup
  #         - GroupId
############################################
############# POSTGRES DB SECURITY group - rules for connection from QuickSight & Glue
###########################################

  PostgresSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: POSTGRES DB SECURITY group - rules for connection from QuickSight & Glue    
      GroupName: !Join ["", [Ref: Prefix,"-",Ref: ENV,"-POSTGRES-SecurityGroup"]]
      VpcId: 
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Join ["", [Ref: Prefix,"-",Ref: ENV,"-POSTGRES-SecurityGroup"]]
      - Key: CloudFormationStack
        Value: !Ref 'AWS::StackId'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 54.70.204.128/27
          Description: US_WEST_2 QuickSight CIDR range - PRODUCTION
          #Ref: https://docs.aws.amazon.com/quicksight/latest/user/regions.html

  PostgresDBSelfInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      Description: Self Inbound rule for Glue, requirement as per documentation - PRODUCTION
      SourceSecurityGroupId:
        Fn::GetAtt:
          - PostgresSecurityGroup
          - GroupId
      GroupId:
        Fn::GetAtt:
          - PostgresSecurityGroup
          - GroupId

  PostgresDBLambdaInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      Description: Inbound from Lambda to Postgres - PRODUCTION
      SourceSecurityGroupId:
        Fn::GetAtt:
          - LambdaSecurityGroup
          - GroupId
      GroupId:
        Fn::GetAtt:
          - PostgresSecurityGroup
          - GroupId

  PostgresDBBastionInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      Description: Inbound from Bastion to Postgres - PRODUCTION
      SourceSecurityGroupId:
        Fn::GetAtt:
          - BastionSecurityGroup
          - GroupId
      GroupId:
        Fn::GetAtt:
          - PostgresSecurityGroup
          - GroupId   

  PostgresDBEksclusterInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      Description: Inbound from Eks Cluster to Postgres - PRODUCTION
      SourceSecurityGroupId: "sg-0e6cd64d413cce1e1"
        # Fn::GetAtt:
        #   - "sg-0e6cd64d413cce1e1"
        #   - GroupId
      GroupId:
        Fn::GetAtt:
          - PostgresSecurityGroup
          - GroupId        

##################### AURORADB SECURITY GROUP ####################
  AuroraDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      # GroupDescription: AuroraDB Security group - Inbound from securitygroups of  Memcached, Lambda, Bastion through 5432. Outbound only to Memcached SG through port 5432.
      GroupDescription: AuroraDB Security group - Inbound from 5432 from everywhere. Outbound to 5432 everywhere     
      GroupName: !Join ["", [Ref: Prefix,"-",Ref: ENV,"-AuroraDB-SecurityGroup"]]
      VpcId: 
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Join ["", [Ref: Prefix,"-",Ref: ENV,"-AuroraDB-SecurityGroup"]]
      - Key: CloudFormationStack
        Value: !Ref 'AWS::StackId' #which uses one Private subnet us-west-2b [in Dev]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
          # CidrIp: 
          #   Ref:  PrivateSubnetFourCidr
          # SourceSecurityGroupId:
          #   Ref: MemCachedSecurityGroup 
      SecurityGroupEgress:
 #       - CidrIp: PrivateSubnetFourCidr
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0

  # AuroraDBInboundFromMemCacheRule:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     IpProtocol: tcp
  #     FromPort: 5432
  #     ToPort: 5432
  #     SourceSecurityGroupId:
  #       Fn::GetAtt:
  #         - MemCachedSecurityGroup
  #         - GroupId
  #     GroupId:
  #       Fn::GetAtt:
  #         - AuroraDBSecurityGroup
  #         - GroupId

  # AuroraDBInboundFromLambda:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     IpProtocol: tcp
  #     FromPort: 5432
  #     ToPort: 5432
  #     SourceSecurityGroupId:
  #       Fn::GetAtt:
  #         - LambdaSecurityGroup
  #         - GroupId
  #     GroupId:
  #       Fn::GetAtt:
  #         - AuroraDBSecurityGroup
  #         - GroupId

  # AuroraDBInboundFromBastion:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     IpProtocol: tcp
  #     FromPort: 5432
  #     ToPort: 5432
  #     SourceSecurityGroupId:
  #       Fn::GetAtt:
  #         - BastionSecurityGroup
  #         - GroupId
  #     GroupId:
  #       Fn::GetAtt:
  #         - AuroraDBSecurityGroup
  #         - GroupId

  # AuroraDBOutboundtoMemCacheRule:
  #   Type: AWS::EC2::SecurityGroupEgress
  #   Properties:
  #     IpProtocol: tcp
  #     FromPort: 11211
  #     ToPort: 11211
  #     DestinationSecurityGroupId:
  #       Fn::GetAtt:
  #         - MemCachedSecurityGroup
  #         - GroupId  
  #     GroupId:
  #       Fn::GetAtt:
  #         - AuroraDBSecurityGroup
  #         - GroupId

# ###################### LAMBDA SECURITY GROUP ######################

  LambdaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        # GroupDescription: Lambda Allow all Inbound tcp traffic on port 80 from all IPs 0.0.0.0/0 through SG, Outbound To MemCached-tcp-port:11211 through SG & to AuroraDB-tcp-port-5432 through SG
        GroupDescription: Lambda Allow all Inbound tcp traffic on port 80 from all IPs 0.0.0.0/0 and all outbound traffic
        GroupName: !Join ["", [Ref: Prefix,"-",Ref: ENV,"-Lambda-SecurityGroup"]]
        VpcId: 
          Ref: VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0 #need to check if all inbound traffic should be allowed
            Description: Inbound All traffic from all IPs - PRODUCTION            
            # SourceSecurityGroupId:
            #   Ref: MemCachedSecurityGroup
        Tags:
        - Key: Name
          Value: !Join ["", [Ref: Prefix,"-",Ref: ENV,"-Lambda-SecurityGroup"]]
        - Key: CloudFormationStack
          Value: !Ref 'AWS::StackId'
  # LambdaOutboundtoMemCacheRule:
  #   Type: AWS::EC2::SecurityGroupEgress
  #   Properties:
  #     IpProtocol: tcp
  #     FromPort: 11211
  #     ToPort: 11211
  #     DestinationSecurityGroupId:
  #       Fn::GetAtt:
  #         - MemCachedSecurityGroup
  #         - GroupId  
  #     GroupId:
  #       Fn::GetAtt:
  #         - LambdaSecurityGroup
  #         - GroupId
  # LambdaOutboundToAuroraDBRule:
  #   Type: AWS::EC2::SecurityGroupEgress
  #   Properties:
  #     IpProtocol: tcp
  #     FromPort: 5432
  #     ToPort: 5432
  #     DestinationSecurityGroupId:
  #       Fn::GetAtt:
  #         - AuroraDBSecurityGroup
  #         - GroupId  
  #     GroupId:
  #       Fn::GetAtt:
  #         - LambdaSecurityGroup
  #         - GroupId

# ### need to add DNS-Route53-port53, COgnito, EventBridge

# ################### EC2 Machines - Bastion hosts, EFK instances ###############

# #Commenting for now as we are not able to create key pairs

  # LinuxBastionHost:
  #   Type: AWS::EC2::Instance
  #   # DependsOn:
  #   # - AttachGateway
  #   Properties:
  #     KeyName: !Ref 'KeyPairName'
  #     ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
  #     InstanceType: t3a.medium
  #     NetworkInterfaces:
  #     - AssociatePublicIpAddress: true
  #       DeleteOnTermination: true
  #       Description: ENI for Bastion instance
  #       DeviceIndex: '0'
  #       SubnetId: !Ref 'PublicSubnetOne'
  #       GroupSet:
  #       - !Ref 'BastionSecurityGroup'
  #     Tags:
  #     - Key: Name
  #       # Value: !Sub 'Linux bastion ${VpcCidr}'
  #       Value: !Sub 'Bastion Instance for connecting to services in VPC like AuroraDB, ElastiCache, Gateway etc.'
  #     - Key: CloudFormationStack
  #       Value: !Ref 'AWS::StackId'


  # ElasticHost:
  #   Type: AWS::EC2::Instance
  #   # DependsOn:
  #   # - AttachGateway
  #   Properties:
  #     KeyName: !Ref 'KeyPairName'
  #     ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
  #     InstanceType: t3a.large
  #     BlockDeviceMappings:
  #       - DeviceName: /dev/xvda
  #         Ebs:
  #           VolumeType: gp2
  #           VolumeSize: '30'
  #           DeleteOnTermination: 'false'
  #           Encrypted: 'true'
  #     UserData:
  #       Fn::Base64: 
  #         !Sub |
  #           #!/bin/bash
  #           sudo yum update -y
  #           sudo yum install -y git
  #           # yum install -y httpd.x86_64
  #           # systemctl start httpd.service
  #           # systemctl enable httpd.service
  #           # echo ?Hello World from $(hostname -f)? > /var/www/html/index.html      
  #     NetworkInterfaces:
  #     - AssociatePublicIpAddress: true
  #       DeleteOnTermination: true
  #       Description: ENI for Elastic instance
  #       DeviceIndex: '0'
  #       SubnetId: !Ref 'PublicSubnetTwo'
  #       GroupSet:
  #       - !Ref 'ElasticSearchSecurityGroup'
  #     Tags:
  #     - Key: Name
  #       # Value: !Sub 'Linux bastion ${VpcCidr}'
  #       Value: !Sub 'Elastic Instance in VPC PublicSubnetTwo'
  #     - Key: CloudFormationStack
  #       Value: !Ref 'AWS::StackId'

###########################################################################
############ OUTPUTS SECTION #################
###########################################################################

Outputs:
  StackVPC:
    Description: The ID of the VPC
    Value:
      Ref: VPC
    Export:
      Name: VirtualPrivateCloudID
  PublicSubnetOne:
    Description: The ID of the PublicSubnet-1
    Value:
      Ref: PublicSubnetOne
    Export:
      Name: PublicSubnetOneID
  PublicSubnetTwo:
    Description: The ID of the PublicSubnet-2
    Value:
      Ref: PublicSubnetTwo
    Export:
      Name: PublicSubnetTwoID  
  PrivateSubnetOne:
    Description: The ID of the PrivateSubnet-1
    Value:
      Ref: PrivateSubnetOne
    Export:
      Name: PrivateSubnetOneID
  PrivateSubnetTwo:
    Description: The ID of the PrivateSubnet-2
    Value:
      Ref: PrivateSubnetTwo
    Export:
      Name: PrivateSubnetTwoID
  PrivateSubnetThree:
    Description: The ID of the PrivateSubnet-3
    Value:
      Ref: PrivateSubnetThree
    Export:
      Name: PrivateSubnetThreeID

  AuroraDBPrivateSubnetFour:
    Description: The ID of the AuroraDB subnet - PrivateSubnet-4 
    Value:
      Ref: AuroraPrivateSubnetFour
    Export:
      Name: AuroraPrivateSubnetFourID

  AuroraDBPrivateSubnetFive:
    Description: The ID of the AuroraDB subnet - PrivateSubnet-5 
    Value:
      Ref: AuroraPrivateSubnetFive
    Export:
      Name: AuroraPrivateSubnetFiveID

  # AuroraDBPrivateSubnet:
  #   Description: The ID of the AuroraDB private subnet, also used by Memcached in Dev.
  #   Value:
  #     Ref: PrivateSubnetFour
  #   Export:
  #     Name: AuroraDBPrivateSubnetID
  # MemCachedPrivateSubnet:
  #   Description: The ID of the MemCached private subnet, also used by Memcached in Dev. For Prod Memcached will have seperate subnet.
  #   Value:
  #     Ref: PrivateSubnetFour
  #   Export:
  #     Name: MemCachedPrivateSubnetID

  AuroraSecurityGroupID:
    Description: Security Group ID for AuroraDB
    Value:
      Ref: AuroraDBSecurityGroup
    Export:
      Name: AuroraDBSecurityGroupID
  MemCachedSecurityGroupID:
    Description: Memcached Security Group ID
    Value:
      Ref: MemCachedSecurityGroup
    Export:
      Name: MemCachedSecurityGroupID
  LambdaSecurityGroupID:
    Description: Lambda Security Group ID
    Value:
      Ref: LambdaSecurityGroup
    Export:
      Name: LambdaSecurityGroupID
  BastionSecurityGroupID:
    Description: Bastion Security Group ID
    Value:
      Ref: BastionSecurityGroup
    Export:
      Name: BastionSecurityGroupID
  LoadBalacnerGroupID:
    Description: LoadBalancer Security Group ID
    Value:
      Ref: LBSecurityGroup
    Export:
      Name: LBSecurityGroupID   
  ElasticSecurityGroupID:
    Description: ElasticSearch Security Group ID
    Value:
      Ref: ElasticSearchSecurityGroup
    Export:
      Name: ElasticSearchSecurityGroupID
  PostgresSecurityGroupID:
    Description: Postgres ETL Glue DB Security Group ID
    Value:
      Ref: PostgresSecurityGroup
    Export:
      Name: PostgresSecurityGroupID
  NATGatewayID:
    Description: NAT GATEWAY ID
    Value:
      Ref: NATGateway
    Export:
      Name: NATGatewayID      
  # BastionEC2Instance:
  #   Description: Bastion Host EC2 instance
  #   Value:
  #     Ref: LinuxBastionHost
  #   Export:
  #     Name: BastionHostID
  # ElasticEC2Instance:
  #   Description: Elastic Host EC2 instance
  #   Value:
  #     Ref: ElasticHost
  #   Export:
  #     Name: ElasticHostID


#aws cloudformation list-exports
